extends layout

block content
  div(class="max-w-4xl mx-auto")
    h1(class="text-3xl font-bold flex items-center gap-3 mb-8")
      svg(xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor")
        path(stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z")
      | Integrations

    // Active Integrations
    div(class="card bg-base-200 shadow-lg mb-8")
      div(class="card-body")
        h2(class="card-title flex gap-2 mb-6")
          svg(xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor")
            path(stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z")
          | Active Integrations
        
        div(id="active-integrations-container")
          // This will be populated dynamically

    // Add New Integration
    div(class="grid grid-cols-1 md:grid-cols-3 gap-6")
      // Discord
      div(class="card bg-base-100 shadow-lg hover:shadow-xl transition-all duration-300 cursor-pointer" onclick="showAddIntegration('discord')")
        div(class="card-body items-center text-center")
          div(class="avatar placeholder mb-4")
            div(class="bg-primary/10 text-primary rounded-lg w-16 h-16 flex items-center justify-center")
              svg(xmlns="http://www.w3.org/2000/svg" class="h-10 w-10" viewBox="0 0 24 24" fill="currentColor")
                path(d="M20.317 4.37a19.791 19.791 0 0 0-4.885-1.515a.074.074 0 0 0-.079.037c-.21.375-.444.864-.608 1.25a18.27 18.27 0 0 0-5.487 0a12.64 12.64 0 0 0-.617-1.25a.077.077 0 0 0-.079-.037A19.736 19.736 0 0 0 3.677 4.37a.07.07 0 0 0-.032.027C.533 9.046-.32 13.58.099 18.057a.082.082 0 0 0 .031.057a19.9 19.9 0 0 0 5.993 3.03a.078.078 0 0 0 .084-.028a14.09 14.09 0 0 0 1.226-1.994a.076.076 0 0 0-.041-.106a13.107 13.107 0 0 1-1.872-.892a.077.077 0 0 1-.008-.128a10.2 10.2 0 0 0 .372-.292a.074.074 0 0 1 .077-.01c3.928 1.793 8.18 1.793 12.062 0a.074.074 0 0 1 .078.01c.12.098.246.198.373.292a.077.077 0 0 1-.006.127a12.299 12.299 0 0 1-1.873.892a.077.077 0 0 0-.041.107c.36.698.772 1.362 1.225 1.993a.076.076 0 0 0 .084.028a19.839 19.839 0 0 0 6.002-3.03a.077.077 0 0 0 .032-.054c.5-5.177-.838-9.674-3.549-13.66a.061.061 0 0 0-.031-.03zM8.02 15.33c-1.183 0-2.157-1.085-2.157-2.419c0-1.333.956-2.419 2.157-2.419c1.21 0 2.176 1.096 2.157 2.42c0 1.333-.956 2.418-2.157 2.418zm7.975 0c-1.183 0-2.157-1.085-2.157-2.419c0-1.333.955-2.419 2.157-2.419c1.21 0 2.176 1.096 2.157 2.42c0 1.333-.946 2.418-2.157 2.418z")
          h3(class="font-bold text-lg mb-1") Discord
          p(class="text-sm opacity-70") Get notifications via Discord webhooks

      // Slack
      div(class="card bg-base-100 shadow-lg hover:shadow-xl transition-all duration-300 cursor-pointer" onclick="showAddIntegration('slack')")
        div(class="card-body items-center text-center")
          div(class="avatar placeholder mb-4")
            div(class="bg-[#4A154B]/10 text-[#4A154B] rounded-lg w-16 h-16 flex items-center justify-center")
              svg(xmlns="http://www.w3.org/2000/svg" class="h-10 w-10" viewBox="0 0 24 24" fill="currentColor")
                path(d="M5.042 15.165a2.528 2.528 0 0 1-2.52 2.523A2.528 2.528 0 0 1 0 15.165a2.527 2.527 0 0 1 2.522-2.52h2.52v2.52zM6.313 15.165a2.527 2.527 0 0 1 2.521-2.52 2.527 2.527 0 0 1 2.521 2.52v6.313A2.528 2.528 0 0 1 8.834 24a2.528 2.528 0 0 1-2.521-2.522v-6.313zM8.834 5.042a2.528 2.528 0 0 1-2.521-2.52A2.528 2.528 0 0 1 8.834 0a2.528 2.528 0 0 1 2.521 2.522v2.52H8.834zM8.834 6.313a2.528 2.528 0 0 1 2.521 2.521 2.528 2.528 0 0 1-2.521 2.521H2.522A2.528 2.528 0 0 1 0 8.834a2.528 2.528 0 0 1 2.522-2.521h6.312zM18.956 8.834a2.528 2.528 0 0 1 2.522-2.521A2.528 2.528 0 0 1 24 8.834a2.528 2.528 0 0 1-2.522 2.521h-2.522V8.834zM17.688 8.834a2.528 2.528 0 0 1-2.523 2.521 2.527 2.527 0 0 1-2.52-2.521V2.522A2.527 2.527 0 0 1 15.165 0a2.528 2.528 0 0 1 2.523 2.522v6.312zM15.165 18.956a2.528 2.528 0 0 1 2.523 2.522A2.528 2.528 0 0 1 15.165 24a2.527 2.527 0 0 1-2.52-2.522v-2.522h2.52zM15.165 17.688a2.527 2.527 0 0 1-2.52-2.523 2.526 2.526 0 0 1 2.52-2.52h6.313A2.527 2.527 0 0 1 24 15.165a2.528 2.528 0 0 1-2.522 2.523h-6.313z")
          h3(class="font-bold text-lg mb-1") Slack
          p(class="text-sm opacity-70") Get notifications in your Slack channels

      // Telegram
      div(class="card bg-base-100 shadow-lg hover:shadow-xl transition-all duration-300 cursor-pointer" onclick="showAddIntegration('telegram')")
        div(class="card-body items-center text-center")
          div(class="avatar placeholder mb-4")
            div(class="bg-[#0088cc]/10 text-[#0088cc] rounded-lg w-16 h-16 flex items-center justify-center")
              svg(xmlns="http://www.w3.org/2000/svg" class="h-10 w-10" viewBox="0 0 24 24" fill="currentColor")
                path(d="M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 0 1 .171.325c.016.093.036.306.02.472-.18 1.898-.962 6.502-1.36 8.627-.168.9-.499 1.201-.82 1.23-.696.065-1.225-.46-1.9-.902-1.056-.693-1.653-1.124-2.678-1.8-1.185-.78-.417-1.21.258-1.91.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.14-5.061 3.345-.48.33-.913.49-1.302.48-.428-.008-1.252-.241-1.865-.44-.752-.245-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.83-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635z")
          h3(class="font-bold text-lg mb-1") Telegram
          p(class="text-sm opacity-70") Get notifications via Telegram bot

      // Email
      div(class="card bg-base-100 shadow-lg hover:shadow-xl transition-all duration-300 cursor-pointer" onclick="showAddIntegration('email')")
        div(class="card-body items-center text-center")
          div(class="avatar placeholder mb-4")
            div(class="bg-primary/10 text-primary rounded-lg w-16 h-16 flex items-center justify-center")
              svg(xmlns="http://www.w3.org/2000/svg" class="h-10 w-10" fill="none" viewBox="0 0 24 24" stroke="currentColor")
                path(stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z")
          h3(class="font-bold text-lg mb-1") Email
          p(class="text-sm opacity-70") Get notifications via email

    // Add Integration Modal
    dialog(class="modal" id="integration-modal")
      div(class="modal-box")
        h3(class="font-bold text-lg mb-4" id="modal-title") Add Integration
        form(class="space-y-4" id="integration-form")
          input(type="hidden" name="service" id="integration-service")
          input(type="hidden" name="id" id="integration-id")
          div(class="form-control")
            label(class="label") Label
            input(class="input input-bordered w-full" type="text" name="label" id="integration-label" placeholder="My Integration" required)
          
          div(class="form-control")
            label(class="label")
              span(class="label-text" id="config-label") Configuration
              span(class="label-text-alt opacity-70" id="config-help")
            input(class="input input-bordered w-full font-mono text-sm" type="text" name="config" id="config-input" required)
          
          div(class="modal-action")
            button(class="btn" type="button" onclick="document.getElementById('integration-modal').close()") Cancel
            button(class="btn btn-primary" type="submit" id="modal-submit") Add Integration

    // Toast Container
    div(class="toast toast-end z-50" id="toast")

block scripts
  script.
    // Debug function
    function debug(msg, data) {
      const timestamp = new Date().toISOString();
      console.log(`[${timestamp}] [DEBUG] ${msg}:`, data);
    }

    // Initial data and state
    let currentIntegrations = [];

    // Load integrations data on page load
    document.addEventListener('DOMContentLoaded', async () => {
      await loadIntegrations();
      
      // Set up socket.io for real-time updates
      if (typeof io !== 'undefined') {
        const socket = io();
        
        socket.on('integration-update', () => {
          debug('Received integration-update event from server');
          loadIntegrations();
        });
        
        socket.on('feed-update', () => {
          debug('Received feed-update event, refreshing integrations');
          loadIntegrations();
        });
        
        socket.on('connect', () => {
          debug('Connected to server via socket.io');
        });
        
        socket.on('disconnect', () => {
          debug('Disconnected from server');
        });
        
        debug('Socket.io initialized');
      }
    });

    async function loadIntegrations() {
      try {
        const response = await fetch('/api/integrations');
        if (!response.ok) throw new Error('Failed to load integrations');
        const integrations = await response.json();
        currentIntegrations = integrations;
        renderIntegrations();
      } catch (err) {
        console.error('Error loading integrations:', err);
        showToast('Failed to load integrations', 'error');
      }
    }

    function renderIntegrations() {
      const container = document.getElementById('active-integrations-container');
      
      if (currentIntegrations.length === 0) {
        container.innerHTML = '<div class="text-center py-8 text-base-content/70">No active integrations</div>';
        return;
      }

      container.innerHTML = `
        <div class="grid gap-4">
          ${currentIntegrations.map(conn => `
            <div class="bg-base-100 p-4 rounded-lg shadow flex items-center justify-between gap-4" data-integration-id="${conn.id}">
              <div class="flex items-center gap-3">
                <div class="avatar placeholder">
                  ${getServiceIcon(conn.service)}
                </div>
                <div>
                  <div class="font-medium">${conn.label || conn.service}</div>
                  <div class="text-sm opacity-70">${conn.service}</div>
                </div>
              </div>
              <div class="flex gap-2">
                <button class="btn btn-ghost btn-sm gap-2" onclick="testIntegration('${conn.id}')">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                  </svg>
                  Test
                </button>
                <button class="btn btn-ghost btn-sm" onclick="editIntegration('${conn.id}')">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/>
                  </svg>
                </button>
                <button class="btn btn-ghost btn-sm text-error" onclick="deleteIntegration('${conn.id}')">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                  </svg>
                </button>
              </div>
            </div>
          `).join('')}
        </div>
      `;
    }

    function getServiceIcon(service) {
      const icons = {
        discord: `
          <div class="bg-primary/10 text-primary rounded-lg w-12 h-12 flex items-center justify-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" viewBox="0 0 24 24" fill="currentColor">
              <path d="M20.317 4.37a19.791 19.791 0 0 0-4.885-1.515a.074.074 0 0 0-.079.037c-.21.375-.444.864-.608 1.25a18.27 18.27 0 0 0-5.487 0a12.64 12.64 0 0 0-.617-1.25a.077.077 0 0 0-.079-.037A19.736 19.736 0 0 0 3.677 4.37a.07.07 0 0 0-.032.027C.533 9.046-.32 13.58.099 18.057a.082.082 0 0 0 .031.057a19.9 19.9 0 0 0 5.993 3.03a.078.078 0 0 0 .084-.028a14.09 14.09 0 0 0 1.226-1.994a.076.076 0 0 0-.041-.106a13.107 13.107 0 0 1-1.872-.892a.077.077 0 0 1-.008-.128a10.2 10.2 0 0 0 .372-.292a.074.074 0 0 1 .077-.01c3.928 1.793 8.18 1.793 12.062 0a.074.074 0 0 1 .078.01c.12.098.246.198.373.292a.077.077 0 0 1-.006.127a12.299 12.299 0 0 1-1.873.892a.077.077 0 0 0-.041.107c.36.698.772 1.362 1.225 1.993a.076.076 0 0 0 .084.028a19.839 19.839 0 0 0 6.002-3.03a.077.077 0 0 0 .032-.054c.5-5.177-.838-9.674-3.549-13.66a.061.061 0 0 0-.031-.03zM8.02 15.33c-1.183 0-2.157-1.085-2.157-2.419c0-1.333.956-2.419 2.157-2.419c1.21 0 2.176 1.096 2.157 2.42c0 1.333-.956 2.418-2.157 2.418zm7.975 0c-1.183 0-2.157-1.085-2.157-2.419c0-1.333.955-2.419 2.157-2.419c1.21 0 2.176 1.096 2.157 2.42c0 1.333-.946 2.418-2.157 2.418z"/>
            </svg>
          </div>
        `,
        slack: `
          <div class="bg-[#4A154B]/10 text-[#4A154B] rounded-lg w-12 h-12 flex items-center justify-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" viewBox="0 0 24 24" fill="currentColor">
              <path d="M5.042 15.165a2.528 2.528 0 0 1-2.52 2.523A2.528 2.528 0 0 1 0 15.165a2.527 2.527 0 0 1 2.522-2.52h2.52v2.52zM6.313 15.165a2.527 2.527 0 0 1 2.521-2.52 2.527 2.527 0 0 1 2.521 2.52v6.313A2.528 2.528 0 0 1 8.834 24a2.528 2.528 0 0 1-2.521-2.522v-6.313zM8.834 5.042a2.528 2.528 0 0 1-2.521-2.52A2.528 2.528 0 0 1 8.834 0a2.528 2.528 0 0 1 2.521 2.522v2.52H8.834zM8.834 6.313a2.528 2.528 0 0 1 2.521 2.521 2.528 2.528 0 0 1-2.521 2.521H2.522A2.528 2.528 0 0 1 0 8.834a2.528 2.528 0 0 1 2.522-2.521h6.312zM18.956 8.834a2.528 2.528 0 0 1 2.522-2.521A2.528 2.528 0 0 1 24 8.834a2.528 2.528 0 0 1-2.522 2.521h-2.522V8.834zM17.688 8.834a2.528 2.528 0 0 1-2.523 2.521 2.527 2.527 0 0 1-2.52-2.521V2.522A2.527 2.527 0 0 1 15.165 0a2.528 2.528 0 0 1 2.523 2.522v6.312zM15.165 18.956a2.528 2.528 0 0 1 2.523 2.522A2.528 2.528 0 0 1 15.165 24a2.527 2.527 0 0 1-2.52-2.522v-2.522h2.52zM15.165 17.688a2.527 2.527 0 0 1-2.52-2.523 2.526 2.526 0 0 1 2.52-2.52h6.313A2.527 2.527 0 0 1 24 15.165a2.528 2.528 0 0 1-2.522 2.523h-6.313z"/>
            </svg>
          </div>
        `,
        telegram: `
          <div class="bg-[#0088cc]/10 text-[#0088cc] rounded-lg w-12 h-12 flex items-center justify-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" viewBox="0 0 24 24" fill="currentColor">
              <path d="M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 0 1 .171.325c.016.093.036.306.02.472-.18 1.898-.962 6.502-1.36 8.627-.168.9-.499 1.201-.82 1.23-.696.065-1.225-.46-1.9-.902-1.056-.693-1.653-1.124-2.678-1.8-1.185-.78-.417-1.21.258-1.91.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.14-5.061 3.345-.48.33-.913.49-1.302.48-.428-.008-1.252-.241-1.865-.44-.752-.245-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.83-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635z"/>
            </svg>
          </div>
        `,
        email: `
          <div class="bg-primary/10 text-primary rounded-lg w-12 h-12 flex items-center justify-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
            </svg>
          </div>
        `
      };
      return icons[service] || icons.email;
    }

    function showAddIntegration(service) {
      document.getElementById('integration-service').value = service;
      document.getElementById('integration-id').value = '';
      document.getElementById('modal-title').textContent = 'Add Integration';
      document.getElementById('modal-submit').textContent = 'Add Integration';
      document.getElementById('integration-label').value = '';
      document.getElementById('config-input').value = '';
      
      const modal = document.getElementById('integration-modal');
      const configLabel = document.getElementById('config-label');
      const configHelp = document.getElementById('config-help');
      const configInput = document.getElementById('config-input');
      
      if (service === 'discord') {
        configLabel.textContent = 'Webhook URL';
        configHelp.textContent = 'Discord webhook URL';
        configInput.placeholder = 'https://discord.com/api/webhooks/...';
        configInput.type = 'url';
      } else if (service === 'slack') {
        configLabel.textContent = 'Webhook URL';
        configHelp.textContent = 'Slack webhook URL';
        configInput.placeholder = 'https://hooks.slack.com/services/...';
        configInput.type = 'url';
      } else if (service === 'telegram') {
        configLabel.textContent = 'Bot Configuration';
        configHelp.textContent = 'Format: BOT_TOKEN:CHAT_ID';
        configInput.placeholder = '123456789:ABCdefGHIjklMNOpqrsTUVwxyz:-100123456789';
        configInput.type = 'text';
      } else if (service === 'email') {
        configLabel.textContent = 'Email Address';
        configHelp.textContent = 'Email address to receive notifications';
        configInput.placeholder = 'user@example.com';
        configInput.type = 'email';
      }
      
      modal.showModal();
    }
    
    async function editIntegration(id) {
      try {
        const response = await fetch(`/api/integrations/${id}`);
        if (!response.ok) throw new Error('Failed to load integration');
        const integration = await response.json();
        
        document.getElementById('integration-service').value = integration.service;
        document.getElementById('integration-id').value = id;
        document.getElementById('integration-label').value = integration.label || '';
        document.getElementById('config-input').value = integration.config || '';
        document.getElementById('modal-title').textContent = 'Edit Integration';
        document.getElementById('modal-submit').textContent = 'Save Changes';
        
        const configLabel = document.getElementById('config-label');
        const configHelp = document.getElementById('config-help');
        const configInput = document.getElementById('config-input');
        
        if (integration.service === 'discord') {
          configLabel.textContent = 'Webhook URL';
          configHelp.textContent = 'Discord webhook URL';
          configInput.type = 'url';
        } else if (integration.service === 'slack') {
          configLabel.textContent = 'Webhook URL';
          configHelp.textContent = 'Slack webhook URL';
          configInput.type = 'url';
        } else if (integration.service === 'telegram') {
          configLabel.textContent = 'Bot Configuration';
          configHelp.textContent = 'Format: BOT_TOKEN:CHAT_ID';
          configInput.type = 'text';
        } else if (integration.service === 'email') {
          configLabel.textContent = 'Email Address';
          configHelp.textContent = 'Email address to receive notifications';
          configInput.type = 'email';
        }
        
        document.getElementById('integration-modal').showModal();
      } catch (err) {
        showToast(err.message, 'error');
      }
    }
    
    document.getElementById('integration-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData.entries());
      const id = data.id;
      delete data.id;
      
      // Add loading state
      const submitBtn = document.getElementById('modal-submit');
      const originalText = submitBtn.textContent;
      submitBtn.textContent = 'Saving...';
      submitBtn.disabled = true;
      
      try {
        const url = id ? `/api/integrations/${id}` : '/integrations/add';
        const method = id ? 'PUT' : 'POST';
        
        const response = await fetch(url, {
          method,
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        
        if (!response.ok) throw new Error('Failed to save integration');
        
        document.getElementById('integration-modal').close();
        showToast(id ? 'Integration updated successfully' : 'Integration added successfully', 'success');
        
        // Reload integrations data without refreshing page
        await loadIntegrations();
        
      } catch (err) {
        showToast(err.message, 'error');
      } finally {
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
      }
    });
    
    async function testIntegration(id) {
      try {
        const response = await fetch(`/api/integrations/${id}/test`, { method: 'POST' });
        const result = await response.json();
        if (!result.success) throw new Error(result.error);
        showToast(result.message || 'Test message sent!', 'success');
      } catch (err) {
        showToast(err.message, 'error');
      }
    }
    
    async function deleteIntegration(id) {
      if (!confirm('Are you sure you want to delete this integration?')) return;
      
      try {
        const response = await fetch(`/api/integrations/delete/${id}`, { method: 'POST' });
        if (!response.ok) throw new Error('Failed to delete integration');
        showToast('Integration deleted successfully', 'success');
        
        // Remove from UI immediately
        const element = document.querySelector(`[data-integration-id="${id}"]`);
        if (element) {
          element.style.opacity = '0.5';
          element.style.transform = 'scale(0.95)';
          setTimeout(() => {
            element.remove();
            // Update the container if no integrations left
            if (document.querySelectorAll('[data-integration-id]').length === 0) {
              document.getElementById('active-integrations-container').innerHTML = 
                '<div class="text-center py-8 text-base-content/70">No active integrations</div>';
            }
          }, 300);
        }
        
        // Update local data
        currentIntegrations = currentIntegrations.filter(conn => conn.id !== id);
        
      } catch (err) {
        showToast(err.message, 'error');
      }
    }
    
    function showToast(message, type = 'info') {
      const toast = document.getElementById('toast');
      const bgColor = type === 'error' ? 'alert-error' : type === 'success' ? 'alert-success' : 'alert-info';
      toast.innerHTML = `
        <div class="alert ${bgColor} shadow-lg">
          <span class="text-content">${message}</span>
        </div>
      `;
      setTimeout(() => toast.innerHTML = '', 3000);
    }
